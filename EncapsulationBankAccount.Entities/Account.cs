using System;

namespace EncapsulationBankAccount.Entities
{
    public class Account
    {
        private int id;
        private decimal balance;
        private DateTime created;

        /// <summary>
        /// Initializes a new instance of this class. For existing records.
        /// </summary>
        /// <param name="id">The persistence id generated by the database</param>
        /// <param name="balance">The balance of the account</param>
        /// <param name="created">The date when the account was created</param>
        public Account(int id, decimal balance, DateTime created)
        {
            if (id <= 0)
            {
                throw new ArgumentOutOfRangeException("Id skal være over 0");
            }
            else
            {
                Id = id;
                Balance = balance;
                Created = created;
            }
        }
        /// <summary>
        /// Initializes a new instance of this class. Use for new records not yet persistent
        /// </summary>
        /// <param name="initialBalance">The initial balance of the account.</param>
        public Account(decimal initialBalance)
        {
            Balance = initialBalance;
            created = DateTime.Today;
        }

        public int Id
        {
            get
            {
                return id;
            }
            set
            {
                if (value<1)
                {
                    throw new ArgumentOutOfRangeException("Skal være større end 0");
                }
                id = value;
            }
        }

        public decimal Balance
        {
            get
            {
                return balance;
            }
            set
            {
                var validationResult = ValidateBalance(value);
                if (!validationResult.isValid)
                {
                    throw new ArgumentOutOfRangeException(validationResult.errorMessage);
                }
                if (balance != value)
                    balance = value;
            }
        }

        public DateTime Created { get => created; set => created = value; }

        public void Withdraw(decimal amount)
        {
            if (amount > 25000 || amount <1)
            {
                throw new ArgumentOutOfRangeException("Beløb skal være imellem 1 og 25000");
            }
            Balance -= amount;
        }

        public void Deposit(decimal amount)
        {
            if (amount > 25000 || amount < 1)
            {
                throw new ArgumentOutOfRangeException("Beløb skal være imellem 1 og 25000");
            }
            Balance += amount;
        }

        public static (bool isValid, string errorMessage) ValidateBalance(decimal balance)
        {
            if (balance < -999_999_999)
                return (false, "Saldoen er mindre end det tilladte");
            else if (balance > 999_999_999)
                return (false, "Saldoen er større end det tilladte");
            else
                return (true, String.Empty);
        }

    }
}
